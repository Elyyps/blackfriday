{"ast":null,"code":"function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { REDUX } from \"@app/constants\";\nvar INITIAL_STATE = {\n  currentPage: undefined,\n  pages: []\n};\nexport var pageReducer = function pageReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case REDUX.PAGE.SET_PAGES:\n      {\n        var _ref = action,\n            pages = _ref.pages;\n        return _objectSpread({}, state, {\n          pages: pages\n        });\n      }\n\n    case REDUX.PAGE.SET_CURRENT_PAGE:\n      {\n        var _ref2 = action,\n            page = _ref2.page;\n        return _objectSpread({}, state, {\n          currentPage: page\n        });\n      }\n\n    case REDUX.PAGE.ADD_TO_PAGES:\n      {\n        var _ref3 = action,\n            _page = _ref3.page;\n\n        var _pages = addToPages(state.pages, _page);\n\n        return _objectSpread({}, state, {\n          pages: _pages\n        });\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};\nexport var addToPages = function addToPages(pages, page) {\n  var newPages = _toConsumableArray(pages);\n\n  newPages.map(function (item) {\n    return item.id === page.id ? page : item;\n  });\n  newPages.push(page);\n  return _toConsumableArray(Array.from(new Set(newPages)));\n};","map":null,"metadata":{},"sourceType":"module"}