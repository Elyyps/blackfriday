{"ast":null,"code":"function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\n/// <reference path=\"./../../../types/index.d.ts\" />\nimport thunk from \"redux-thunk\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport { routerMiddleware } from \"connected-react-router\";\nimport { combineReducers } from \"redux\";\nimport { connectRouter } from \"connected-react-router\";\nimport { localesReducer } from \"@app/stores/locales\";\nimport { pageReducer } from \"./page\";\nexport var getInitialState = function getInitialState() {\n  var initialState = {};\n  return initialState;\n};\nexport var configureStore = function configureStore(_ref) {\n  var _ref2;\n\n  var history = _ref.history,\n      initialState = _ref.initialState,\n      _ref$middleware = _ref.middleware,\n      middleware = _ref$middleware === void 0 ? [] : _ref$middleware;\n\n  var devtools = process.env.NODE_ENV === \"development\" && typeof window !== \"undefined\" && typeof window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ === \"function\" && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n    actionsBlacklist: []\n  });\n\n  var composeEnhancers = devtools || compose;\n  var store = createStore(combineReducers({\n    locales: localesReducer,\n    page: pageReducer,\n    router: connectRouter(history)\n  }), initialState, composeEnhancers(applyMiddleware.apply(void 0, _toConsumableArray((_ref2 = [thunk, routerMiddleware(history)]).concat.apply(_ref2, _toConsumableArray(middleware)))))); // if (process.env.NODE_ENV !== \"production\") {\n  //   if (module.hot) {\n  //     module.hot.accept(\"./rootReducer\", () => store.replaceReducer(require(\"./rootReducer\").default));\n  //   }\n  // }\n\n  return store;\n};\nexport default configureStore;","map":null,"metadata":{},"sourceType":"module"}