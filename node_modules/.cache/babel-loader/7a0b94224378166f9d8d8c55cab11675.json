{"ast":null,"code":"function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\n\nfunction isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/// <reference path=\"./custom.d.ts\" />\n// tslint:disable\n\n/**\n * Viper Mock API\n * The Viper Mock API, provided for the Viper front end team so they can develop without having to wait for slow back end developers. ;)\n *\n * OpenAPI spec version: 1.0\n *\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\nimport * as url from \"url\";\nimport * as portableFetch from \"portable-fetch\";\nimport { getConfig } from \"@app/util\";\nvar BASE_PATH = getConfig().API_URL.replace(/\\/+$/, \"\");\n/**\n *\n * @export\n */\n\nexport var COLLECTION_FORMATS = {\n  csv: \",\",\n  ssv: \" \",\n  tsv: \"\\t\",\n  pipes: \"|\"\n};\n/**\n *\n * @export\n * @interface FetchAPI\n */\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport var BaseAPI = function BaseAPI(configuration) {\n  var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : BASE_PATH;\n  var fetch = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : portableFetch;\n\n  _classCallCheck(this, BaseAPI);\n\n  this.basePath = basePath;\n  this.fetch = fetch;\n\n  _defineProperty(this, \"configuration\", void 0);\n\n  if (configuration) {\n    this.configuration = configuration;\n    this.basePath = configuration.basePath || this.basePath;\n  }\n};\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\n\nexport var RequiredError =\n/*#__PURE__*/\nfunction (_Error) {\n  _inherits(RequiredError, _Error);\n\n  function RequiredError(field, msg) {\n    var _this;\n\n    _classCallCheck(this, RequiredError);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(RequiredError).call(this, msg));\n    _this.field = field;\n\n    _defineProperty(_assertThisInitialized(_this), \"name\", \"RequiredError\");\n\n    return _this;\n  }\n\n  return RequiredError;\n}(_wrapNativeSuper(Error));\n/**\n *\n * @export\n * @interface AddressInfo\n */\n\n/**\n * BusinesscategoryApi - fetch parameter creator\n * @export\n */\nexport var BusinesscategoryApiFetchParamCreator = function BusinesscategoryApiFetchParamCreator(configuration) {\n  return {\n    /**\n     *\n     * @param {string} productLine Filter by productline\n     * @param {number} skip Skip for pagination\n     * @param {string} [filter] Filter by category\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    businessCategoryGet: function businessCategoryGet(productLine, skip, filter) {\n      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      // verify required parameter 'productLine' is not null or undefined\n      if (productLine === null || productLine === undefined) {\n        throw new RequiredError(\"productLine\", \"Required parameter productLine was null or undefined when calling businessCategoryGet.\");\n      } // verify required parameter 'skip' is not null or undefined\n\n\n      if (skip === null || skip === undefined) {\n        throw new RequiredError(\"skip\", \"Required parameter skip was null or undefined when calling businessCategoryGet.\");\n      }\n\n      var localVarPath = \"/business/category\";\n      var localVarUrlObj = url.parse(localVarPath, true);\n      var localVarRequestOptions = Object.assign({\n        method: \"GET\"\n      }, options);\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n\n      if (filter !== undefined) {\n        localVarQueryParameter[\"filter\"] = filter;\n      }\n\n      if (productLine !== undefined) {\n        localVarQueryParameter[\"productLine\"] = productLine;\n      }\n\n      if (skip !== undefined) {\n        localVarQueryParameter[\"skip\"] = skip;\n      }\n\n      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n      return {\n        url: url.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }\n  };\n};\n/**\n * BusinesscategoryApi - functional programming interface\n * @export\n */\n\nexport var BusinesscategoryApiFp = function BusinesscategoryApiFp(configuration) {\n  return {\n    /**\n     *\n     * @param {string} productLine Filter by productline\n     * @param {number} skip Skip for pagination\n     * @param {string} [filter] Filter by category\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    businessCategoryGet: function businessCategoryGet(productLine, skip, filter, options) {\n      var localVarFetchArgs = BusinesscategoryApiFetchParamCreator(configuration).businessCategoryGet(productLine, skip, filter, options);\n      return function () {\n        var fetch = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : portableFetch;\n        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : BASE_PATH;\n        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {\n          if (response.status >= 200 && response.status < 300) {\n            return response;\n          } else {\n            throw response;\n          }\n        });\n      };\n    }\n  };\n};\n/**\n * BusinesscategoryApi - factory interface\n * @export\n */\n\nexport var BusinesscategoryApiFactory = function BusinesscategoryApiFactory(configuration, fetch, basePath) {\n  return {\n    /**\n     *\n     * @param {string} productLine Filter by productline\n     * @param {number} skip Skip for pagination\n     * @param {string} [filter] Filter by category\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    businessCategoryGet: function businessCategoryGet(productLine, skip, filter, options) {\n      return BusinesscategoryApiFp(configuration).businessCategoryGet(productLine, skip, filter, options)(fetch, basePath);\n    }\n  };\n};\n/**\n * BusinesscategoryApi - object-oriented interface\n * @export\n * @class BusinesscategoryApi\n * @extends {BaseAPI}\n */\n\nexport var BusinesscategoryApi =\n/*#__PURE__*/\nfunction (_BaseAPI) {\n  _inherits(BusinesscategoryApi, _BaseAPI);\n\n  function BusinesscategoryApi() {\n    _classCallCheck(this, BusinesscategoryApi);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(BusinesscategoryApi).apply(this, arguments));\n  }\n\n  _createClass(BusinesscategoryApi, [{\n    key: \"businessCategoryGet\",\n\n    /**\n     *\n     * @param {} productLine Filter by productline\n     * @param {} skip Skip for pagination\n     * @param {} [filter] Filter by category\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof BusinesscategoryApi\n     */\n    value: function businessCategoryGet(productLine, skip, filter, options) {\n      return BusinesscategoryApiFp(this.configuration).businessCategoryGet(productLine, skip, filter, options)(this.fetch, this.basePath);\n    }\n  }]);\n\n  return BusinesscategoryApi;\n}(BaseAPI);\n/**\n * BusinessproductsApi - fetch parameter creator\n * @export\n */\n\nexport var BusinessproductsApiFetchParamCreator = function BusinessproductsApiFetchParamCreator(configuration) {\n  return {\n    /**\n     *\n     * @param {string} category Filter by category\n     * @param {number} skip Skip for pagination\n     * @param {string} [filter] Filter by product\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    businessProductsGet: function businessProductsGet(category, skip, filter) {\n      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      // verify required parameter 'category' is not null or undefined\n      if (category === null || category === undefined) {\n        throw new RequiredError(\"category\", \"Required parameter category was null or undefined when calling businessProductsGet.\");\n      } // verify required parameter 'skip' is not null or undefined\n\n\n      if (skip === null || skip === undefined) {\n        throw new RequiredError(\"skip\", \"Required parameter skip was null or undefined when calling businessProductsGet.\");\n      }\n\n      var localVarPath = \"/business/products\";\n      var localVarUrlObj = url.parse(localVarPath, true);\n      var localVarRequestOptions = Object.assign({\n        method: \"GET\"\n      }, options);\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n\n      if (filter !== undefined) {\n        localVarQueryParameter[\"filter\"] = filter;\n      }\n\n      if (category !== undefined) {\n        localVarQueryParameter[\"category\"] = category;\n      }\n\n      if (skip !== undefined) {\n        localVarQueryParameter[\"skip\"] = skip;\n      }\n\n      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n      return {\n        url: url.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }\n  };\n};\n/**\n * BusinessproductsApi - functional programming interface\n * @export\n */\n\nexport var BusinessproductsApiFp = function BusinessproductsApiFp(configuration) {\n  return {\n    /**\n     *\n     * @param {string} category Filter by category\n     * @param {number} skip Skip for pagination\n     * @param {string} [filter] Filter by product\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    businessProductsGet: function businessProductsGet(category, skip, filter, options) {\n      var localVarFetchArgs = BusinessproductsApiFetchParamCreator(configuration).businessProductsGet(category, skip, filter, options);\n      return function () {\n        var fetch = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : portableFetch;\n        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : BASE_PATH;\n        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {\n          if (response.status >= 200 && response.status < 300) {\n            return response;\n          } else {\n            throw response;\n          }\n        });\n      };\n    }\n  };\n};\n/**\n * BusinessproductsApi - factory interface\n * @export\n */\n\nexport var BusinessproductsApiFactory = function BusinessproductsApiFactory(configuration, fetch, basePath) {\n  return {\n    /**\n     *\n     * @param {string} category Filter by category\n     * @param {number} skip Skip for pagination\n     * @param {string} [filter] Filter by product\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    businessProductsGet: function businessProductsGet(category, skip, filter, options) {\n      return BusinessproductsApiFp(configuration).businessProductsGet(category, skip, filter, options)(fetch, basePath);\n    }\n  };\n};\n/**\n * BusinessproductsApi - object-oriented interface\n * @export\n * @class BusinessproductsApi\n * @extends {BaseAPI}\n */\n\nexport var BusinessproductsApi =\n/*#__PURE__*/\nfunction (_BaseAPI2) {\n  _inherits(BusinessproductsApi, _BaseAPI2);\n\n  function BusinessproductsApi() {\n    _classCallCheck(this, BusinessproductsApi);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(BusinessproductsApi).apply(this, arguments));\n  }\n\n  _createClass(BusinessproductsApi, [{\n    key: \"businessProductsGet\",\n\n    /**\n     *\n     * @param {} category Filter by category\n     * @param {} skip Skip for pagination\n     * @param {} [filter] Filter by product\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof BusinessproductsApi\n     */\n    value: function businessProductsGet(category, skip, filter, options) {\n      return BusinessproductsApiFp(this.configuration).businessProductsGet(category, skip, filter, options)(this.fetch, this.basePath);\n    }\n  }]);\n\n  return BusinessproductsApi;\n}(BaseAPI);\n/**\n * CardApi - fetch parameter creator\n * @export\n */\n\nexport var CardApiFetchParamCreator = function CardApiFetchParamCreator(configuration) {\n  return {\n    /**\n     *\n     * @param {number} take How many per page\n     * @param {number} skip Skip for pagination\n     * @param {string} [filter] Filter by cardName\n     * @param {string} [category] Filter by category\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    cardGet: function cardGet(take, skip, filter, category) {\n      var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n\n      // verify required parameter 'take' is not null or undefined\n      if (take === null || take === undefined) {\n        throw new RequiredError(\"take\", \"Required parameter take was null or undefined when calling cardGet.\");\n      } // verify required parameter 'skip' is not null or undefined\n\n\n      if (skip === null || skip === undefined) {\n        throw new RequiredError(\"skip\", \"Required parameter skip was null or undefined when calling cardGet.\");\n      }\n\n      var localVarPath = \"/card\";\n      var localVarUrlObj = url.parse(localVarPath, true);\n      var localVarRequestOptions = Object.assign({\n        method: \"GET\"\n      }, options);\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n\n      if (filter !== undefined) {\n        localVarQueryParameter[\"filter\"] = filter;\n      }\n\n      if (category !== undefined) {\n        localVarQueryParameter[\"category\"] = category;\n      }\n\n      if (take !== undefined) {\n        localVarQueryParameter[\"take\"] = take;\n      }\n\n      if (skip !== undefined) {\n        localVarQueryParameter[\"skip\"] = skip;\n      }\n\n      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n      return {\n        url: url.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }\n  };\n};\n/**\n * CardApi - functional programming interface\n * @export\n */\n\nexport var CardApiFp = function CardApiFp(configuration) {\n  return {\n    /**\n     *\n     * @param {number} take How many per page\n     * @param {number} skip Skip for pagination\n     * @param {string} [filter] Filter by cardName\n     * @param {string} [category] Filter by category\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    cardGet: function cardGet(take, skip, filter, category, options) {\n      var localVarFetchArgs = CardApiFetchParamCreator(configuration).cardGet(take, skip, filter, category, options);\n      return function () {\n        var fetch = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : portableFetch;\n        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : BASE_PATH;\n        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {\n          if (response.status >= 200 && response.status < 300) {\n            return response;\n          } else {\n            throw response;\n          }\n        });\n      };\n    }\n  };\n};\n/**\n * CardApi - factory interface\n * @export\n */\n\nexport var CardApiFactory = function CardApiFactory(configuration, fetch, basePath) {\n  return {\n    /**\n     *\n     * @param {number} take How many per page\n     * @param {number} skip Skip for pagination\n     * @param {string} [filter] Filter by cardName\n     * @param {string} [category] Filter by category\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    cardGet: function cardGet(take, skip, filter, category, options) {\n      return CardApiFp(configuration).cardGet(take, skip, filter, category, options)(fetch, basePath);\n    }\n  };\n};\n/**\n * CardApi - object-oriented interface\n * @export\n * @class CardApi\n * @extends {BaseAPI}\n */\n\nexport var CardApi =\n/*#__PURE__*/\nfunction (_BaseAPI3) {\n  _inherits(CardApi, _BaseAPI3);\n\n  function CardApi() {\n    _classCallCheck(this, CardApi);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(CardApi).apply(this, arguments));\n  }\n\n  _createClass(CardApi, [{\n    key: \"cardGet\",\n\n    /**\n     *\n     * @param {} take How many per page\n     * @param {} skip Skip for pagination\n     * @param {} [filter] Filter by cardName\n     * @param {} [category] Filter by category\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CardApi\n     */\n    value: function cardGet(take, skip, filter, category, options) {\n      return CardApiFp(this.configuration).cardGet(take, skip, filter, category, options)(this.fetch, this.basePath);\n    }\n  }]);\n\n  return CardApi;\n}(BaseAPI);\n/**\n * DummyApi - fetch parameter creator\n * @export\n */\n\nexport var DummyApiFetchParamCreator = function DummyApiFetchParamCreator(configuration) {\n  return {\n    /**\n     *\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    dummyGet: function dummyGet() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var localVarPath = \"/dummy\";\n      var localVarUrlObj = url.parse(localVarPath, true);\n      var localVarRequestOptions = Object.assign({\n        method: \"GET\"\n      }, options);\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n      return {\n        url: url.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     *\n     * @param {DummyModel} DummyModel\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    dummyPost: function dummyPost(DummyModel) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      // verify required parameter 'DummyModel' is not null or undefined\n      if (DummyModel === null || DummyModel === undefined) {\n        throw new RequiredError(\"DummyModel\", \"Required parameter DummyModel was null or undefined when calling dummyPost.\");\n      }\n\n      var localVarPath = \"/dummy\";\n      var localVarUrlObj = url.parse(localVarPath, true);\n      var localVarRequestOptions = Object.assign({\n        method: \"POST\"\n      }, options);\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n      var needsSerialization = \"DummyModel\" !== \"string\" || localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.body = needsSerialization ? JSON.stringify(DummyModel || {}) : DummyModel || \"\";\n      return {\n        url: url.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }\n  };\n};\n/**\n * DummyApi - functional programming interface\n * @export\n */\n\nexport var DummyApiFp = function DummyApiFp(configuration) {\n  return {\n    /**\n     *\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    dummyGet: function dummyGet(options) {\n      var localVarFetchArgs = DummyApiFetchParamCreator(configuration).dummyGet(options);\n      return function () {\n        var fetch = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : portableFetch;\n        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : BASE_PATH;\n        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {\n          if (response.status >= 200 && response.status < 300) {\n            return response;\n          } else {\n            throw response;\n          }\n        });\n      };\n    },\n\n    /**\n     *\n     * @param {DummyModel} DummyModel\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    dummyPost: function dummyPost(DummyModel, options) {\n      var localVarFetchArgs = DummyApiFetchParamCreator(configuration).dummyPost(DummyModel, options);\n      return function () {\n        var fetch = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : portableFetch;\n        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : BASE_PATH;\n        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {\n          if (response.status >= 200 && response.status < 300) {\n            return response;\n          } else {\n            throw response;\n          }\n        });\n      };\n    }\n  };\n};\n/**\n * DummyApi - factory interface\n * @export\n */\n\nexport var DummyApiFactory = function DummyApiFactory(configuration, fetch, basePath) {\n  return {\n    /**\n     *\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    dummyGet: function dummyGet(options) {\n      return DummyApiFp(configuration).dummyGet(options)(fetch, basePath);\n    },\n\n    /**\n     *\n     * @param {DummyModel} DummyModel\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    dummyPost: function dummyPost(DummyModel, options) {\n      return DummyApiFp(configuration).dummyPost(DummyModel, options)(fetch, basePath);\n    }\n  };\n};\n/**\n * DummyApi - object-oriented interface\n * @export\n * @class DummyApi\n * @extends {BaseAPI}\n */\n\nexport var DummyApi =\n/*#__PURE__*/\nfunction (_BaseAPI4) {\n  _inherits(DummyApi, _BaseAPI4);\n\n  function DummyApi() {\n    _classCallCheck(this, DummyApi);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(DummyApi).apply(this, arguments));\n  }\n\n  _createClass(DummyApi, [{\n    key: \"dummyGet\",\n\n    /**\n     *\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DummyApi\n     */\n    value: function dummyGet(options) {\n      return DummyApiFp(this.configuration).dummyGet(options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @param {} DummyModel\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DummyApi\n     */\n\n  }, {\n    key: \"dummyPost\",\n    value: function dummyPost(DummyModel, options) {\n      return DummyApiFp(this.configuration).dummyPost(DummyModel, options)(this.fetch, this.basePath);\n    }\n  }]);\n\n  return DummyApi;\n}(BaseAPI);\n/**\n * NavbarsearchApi - fetch parameter creator\n * @export\n */\n\nexport var NavbarsearchApiFetchParamCreator = function NavbarsearchApiFetchParamCreator(configuration) {\n  return {\n    /**\n     *\n     * @param {string} filter Filter by item name\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    navbarsearchGet: function navbarsearchGet(filter) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      // verify required parameter 'filter' is not null or undefined\n      if (filter === null || filter === undefined) {\n        throw new RequiredError(\"filter\", \"Required parameter filter was null or undefined when calling navbarsearchGet.\");\n      }\n\n      var localVarPath = \"/navbarsearch\";\n      var localVarUrlObj = url.parse(localVarPath, true);\n      var localVarRequestOptions = Object.assign({\n        method: \"GET\"\n      }, options);\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n\n      if (filter !== undefined) {\n        localVarQueryParameter[\"filter\"] = filter;\n      }\n\n      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n      return {\n        url: url.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }\n  };\n};\n/**\n * NavbarsearchApi - functional programming interface\n * @export\n */\n\nexport var NavbarsearchApiFp = function NavbarsearchApiFp(configuration) {\n  return {\n    /**\n     *\n     * @param {string} filter Filter by item name\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    navbarsearchGet: function navbarsearchGet(filter, options) {\n      var localVarFetchArgs = NavbarsearchApiFetchParamCreator(configuration).navbarsearchGet(filter, options);\n      return function () {\n        var fetch = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : portableFetch;\n        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : BASE_PATH;\n        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {\n          if (response.status >= 200 && response.status < 300) {\n            return response;\n          } else {\n            throw response;\n          }\n        });\n      };\n    }\n  };\n};\n/**\n * NavbarsearchApi - factory interface\n * @export\n */\n\nexport var NavbarsearchApiFactory = function NavbarsearchApiFactory(configuration, fetch, basePath) {\n  return {\n    /**\n     *\n     * @param {string} filter Filter by item name\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    navbarsearchGet: function navbarsearchGet(filter, options) {\n      return NavbarsearchApiFp(configuration).navbarsearchGet(filter, options)(fetch, basePath);\n    }\n  };\n};\n/**\n * NavbarsearchApi - object-oriented interface\n * @export\n * @class NavbarsearchApi\n * @extends {BaseAPI}\n */\n\nexport var NavbarsearchApi =\n/*#__PURE__*/\nfunction (_BaseAPI5) {\n  _inherits(NavbarsearchApi, _BaseAPI5);\n\n  function NavbarsearchApi() {\n    _classCallCheck(this, NavbarsearchApi);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(NavbarsearchApi).apply(this, arguments));\n  }\n\n  _createClass(NavbarsearchApi, [{\n    key: \"navbarsearchGet\",\n\n    /**\n     *\n     * @param {} filter Filter by item name\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof NavbarsearchApi\n     */\n    value: function navbarsearchGet(filter, options) {\n      return NavbarsearchApiFp(this.configuration).navbarsearchGet(filter, options)(this.fetch, this.basePath);\n    }\n  }]);\n\n  return NavbarsearchApi;\n}(BaseAPI);\n/**\n * NewsApi - fetch parameter creator\n * @export\n */\n\nexport var NewsApiFetchParamCreator = function NewsApiFetchParamCreator(configuration) {\n  return {\n    /**\n     *\n     * @param {number} take How many per page\n     * @param {number} skip Skip for pagination\n     * @param {string} [filter] Filter by cardName\n     * @param {string} [category] Filter by category\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    newsGet: function newsGet(take, skip, filter, category) {\n      var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n\n      // verify required parameter 'take' is not null or undefined\n      if (take === null || take === undefined) {\n        throw new RequiredError(\"take\", \"Required parameter take was null or undefined when calling newsGet.\");\n      } // verify required parameter 'skip' is not null or undefined\n\n\n      if (skip === null || skip === undefined) {\n        throw new RequiredError(\"skip\", \"Required parameter skip was null or undefined when calling newsGet.\");\n      }\n\n      var localVarPath = \"/news\";\n      var localVarUrlObj = url.parse(localVarPath, true);\n      var localVarRequestOptions = Object.assign({\n        method: \"GET\"\n      }, options);\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n\n      if (filter !== undefined) {\n        localVarQueryParameter[\"filter\"] = filter;\n      }\n\n      if (category !== undefined) {\n        localVarQueryParameter[\"category\"] = category;\n      }\n\n      if (take !== undefined) {\n        localVarQueryParameter[\"take\"] = take;\n      }\n\n      if (skip !== undefined) {\n        localVarQueryParameter[\"skip\"] = skip;\n      }\n\n      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n      return {\n        url: url.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }\n  };\n};\n/**\n * NewsApi - functional programming interface\n * @export\n */\n\nexport var NewsApiFp = function NewsApiFp(configuration) {\n  return {\n    /**\n     *\n     * @param {number} take How many per page\n     * @param {number} skip Skip for pagination\n     * @param {string} [filter] Filter by cardName\n     * @param {string} [category] Filter by category\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    newsGet: function newsGet(take, skip, filter, category, options) {\n      var localVarFetchArgs = NewsApiFetchParamCreator(configuration).newsGet(take, skip, filter, category, options);\n      return function () {\n        var fetch = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : portableFetch;\n        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : BASE_PATH;\n        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {\n          if (response.status >= 200 && response.status < 300) {\n            return response;\n          } else {\n            throw response;\n          }\n        });\n      };\n    }\n  };\n};\n/**\n * NewsApi - factory interface\n * @export\n */\n\nexport var NewsApiFactory = function NewsApiFactory(configuration, fetch, basePath) {\n  return {\n    /**\n     *\n     * @param {number} take How many per page\n     * @param {number} skip Skip for pagination\n     * @param {string} [filter] Filter by cardName\n     * @param {string} [category] Filter by category\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    newsGet: function newsGet(take, skip, filter, category, options) {\n      return NewsApiFp(configuration).newsGet(take, skip, filter, category, options)(fetch, basePath);\n    }\n  };\n};\n/**\n * NewsApi - object-oriented interface\n * @export\n * @class NewsApi\n * @extends {BaseAPI}\n */\n\nexport var NewsApi =\n/*#__PURE__*/\nfunction (_BaseAPI6) {\n  _inherits(NewsApi, _BaseAPI6);\n\n  function NewsApi() {\n    _classCallCheck(this, NewsApi);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(NewsApi).apply(this, arguments));\n  }\n\n  _createClass(NewsApi, [{\n    key: \"newsGet\",\n\n    /**\n     *\n     * @param {} take How many per page\n     * @param {} skip Skip for pagination\n     * @param {} [filter] Filter by cardName\n     * @param {} [category] Filter by category\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof NewsApi\n     */\n    value: function newsGet(take, skip, filter, category, options) {\n      return NewsApiFp(this.configuration).newsGet(take, skip, filter, category, options)(this.fetch, this.basePath);\n    }\n  }]);\n\n  return NewsApi;\n}(BaseAPI);\n/**\n * PageApi - fetch parameter creator\n * @export\n */\n\nexport var PageApiFetchParamCreator = function PageApiFetchParamCreator(configuration) {\n  return {\n    /**\n     *\n     * @param {PageModel} PageModel\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    pagePost: function pagePost(PageModel) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      // verify required parameter 'PageModel' is not null or undefined\n      if (PageModel === null || PageModel === undefined) {\n        throw new RequiredError(\"PageModel\", \"Required parameter PageModel was null or undefined when calling pagePost.\");\n      }\n\n      var localVarPath = \"/page\";\n      var localVarUrlObj = url.parse(localVarPath, true);\n      var localVarRequestOptions = Object.assign({\n        method: \"POST\"\n      }, options);\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n      var needsSerialization = \"PageModel\" !== \"string\" || localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.body = needsSerialization ? JSON.stringify(PageModel || {}) : PageModel || \"\";\n      return {\n        url: url.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     *\n     * @param {string} route\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    pageRouteGet: function pageRouteGet(route) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      // verify required parameter 'route' is not null or undefined\n      if (route === null || route === undefined) {\n        throw new RequiredError(\"route\", \"Required parameter route was null or undefined when calling pageRouteGet.\");\n      }\n\n      var localVarPath = \"/page/{route}\".replace(\"{\".concat(\"route\", \"}\"), encodeURIComponent(String(route)));\n      var localVarUrlObj = url.parse(localVarPath, true);\n      var localVarRequestOptions = Object.assign({\n        method: \"GET\"\n      }, options);\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n      return {\n        url: url.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }\n  };\n};\n/**\n * PageApi - functional programming interface\n * @export\n */\n\nexport var PageApiFp = function PageApiFp(configuration) {\n  return {\n    /**\n     *\n     * @param {PageModel} PageModel\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    pagePost: function pagePost(PageModel, options) {\n      var localVarFetchArgs = PageApiFetchParamCreator(configuration).pagePost(PageModel, options);\n      return function () {\n        var fetch = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : portableFetch;\n        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : BASE_PATH;\n        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {\n          if (response.status >= 200 && response.status < 300) {\n            return response;\n          } else {\n            throw response;\n          }\n        });\n      };\n    },\n\n    /**\n     *\n     * @param {string} route\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    pageRouteGet: function pageRouteGet(route, options) {\n      var localVarFetchArgs = PageApiFetchParamCreator(configuration).pageRouteGet(route, options);\n      return function () {\n        var fetch = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : portableFetch;\n        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : BASE_PATH;\n        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {\n          if (response.status >= 200 && response.status < 300) {\n            return response;\n          } else {\n            throw response;\n          }\n        });\n      };\n    }\n  };\n};\n/**\n * PageApi - factory interface\n * @export\n */\n\nexport var PageApiFactory = function PageApiFactory(configuration, fetch, basePath) {\n  return {\n    /**\n     *\n     * @param {PageModel} PageModel\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    pagePost: function pagePost(PageModel, options) {\n      return PageApiFp(configuration).pagePost(PageModel, options)(fetch, basePath);\n    },\n\n    /**\n     *\n     * @param {string} route\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    pageRouteGet: function pageRouteGet(route, options) {\n      return PageApiFp(configuration).pageRouteGet(route, options)(fetch, basePath);\n    }\n  };\n};\n/**\n * PageApi - object-oriented interface\n * @export\n * @class PageApi\n * @extends {BaseAPI}\n */\n\nexport var PageApi =\n/*#__PURE__*/\nfunction (_BaseAPI7) {\n  _inherits(PageApi, _BaseAPI7);\n\n  function PageApi() {\n    _classCallCheck(this, PageApi);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(PageApi).apply(this, arguments));\n  }\n\n  _createClass(PageApi, [{\n    key: \"pagePost\",\n\n    /**\n     *\n     * @param {} PageModel\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PageApi\n     */\n    value: function pagePost(PageModel, options) {\n      return PageApiFp(this.configuration).pagePost(PageModel, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @param {} route\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PageApi\n     */\n\n  }, {\n    key: \"pageRouteGet\",\n    value: function pageRouteGet(route, options) {\n      return PageApiFp(this.configuration).pageRouteGet(route, options)(this.fetch, this.basePath);\n    }\n  }]);\n\n  return PageApi;\n}(BaseAPI);\n/**\n * ProductCardApi - fetch parameter creator\n * @export\n */\n\nexport var ProductCardApiFetchParamCreator = function ProductCardApiFetchParamCreator(configuration) {\n  return {\n    /**\n     *\n     * @param {string} search search\n     * @param {Array&lt;string&gt;} product product\n     * @param {Array&lt;string&gt;} category category\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    productCardCategoryGet: function productCardCategoryGet(search, product, category) {\n      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      // verify required parameter 'search' is not null or undefined\n      if (search === null || search === undefined) {\n        throw new RequiredError(\"search\", \"Required parameter search was null or undefined when calling productCardCategoryGet.\");\n      } // verify required parameter 'product' is not null or undefined\n\n\n      if (product === null || product === undefined) {\n        throw new RequiredError(\"product\", \"Required parameter product was null or undefined when calling productCardCategoryGet.\");\n      } // verify required parameter 'category' is not null or undefined\n\n\n      if (category === null || category === undefined) {\n        throw new RequiredError(\"category\", \"Required parameter category was null or undefined when calling productCardCategoryGet.\");\n      }\n\n      var localVarPath = \"/product-card/category\";\n      var localVarUrlObj = url.parse(localVarPath, true);\n      var localVarRequestOptions = Object.assign({\n        method: \"GET\"\n      }, options);\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n\n      if (search !== undefined) {\n        localVarQueryParameter[\"search\"] = search;\n      }\n\n      if (product) {\n        localVarQueryParameter[\"product\"] = product.join(COLLECTION_FORMATS[\"csv\"]);\n      }\n\n      if (category) {\n        localVarQueryParameter[\"category\"] = category.join(COLLECTION_FORMATS[\"csv\"]);\n      }\n\n      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n      return {\n        url: url.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     *\n     * @param {string} search search\n     * @param {Array&lt;string&gt;} product get product\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    productCardProductsGet: function productCardProductsGet(search, product) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      // verify required parameter 'search' is not null or undefined\n      if (search === null || search === undefined) {\n        throw new RequiredError(\"search\", \"Required parameter search was null or undefined when calling productCardProductsGet.\");\n      } // verify required parameter 'product' is not null or undefined\n\n\n      if (product === null || product === undefined) {\n        throw new RequiredError(\"product\", \"Required parameter product was null or undefined when calling productCardProductsGet.\");\n      }\n\n      var localVarPath = \"/product-card/products\";\n      var localVarUrlObj = url.parse(localVarPath, true);\n      var localVarRequestOptions = Object.assign({\n        method: \"GET\"\n      }, options);\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n\n      if (search !== undefined) {\n        localVarQueryParameter[\"search\"] = search;\n      }\n\n      if (product) {\n        localVarQueryParameter[\"product\"] = product.join(COLLECTION_FORMATS[\"csv\"]);\n      }\n\n      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n      return {\n        url: url.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     *\n     * @param {number} take How many per page\n     * @param {number} skip Skip for pagination\n     * @param {Array&lt;string&gt;} filter filter\n     * @param {string} category Filter by  cateogry\n     * @param {string} search search\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    productCardProductsPaginationGet: function productCardProductsPaginationGet(take, skip, filter, category, search) {\n      var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n\n      // verify required parameter 'take' is not null or undefined\n      if (take === null || take === undefined) {\n        throw new RequiredError(\"take\", \"Required parameter take was null or undefined when calling productCardProductsPaginationGet.\");\n      } // verify required parameter 'skip' is not null or undefined\n\n\n      if (skip === null || skip === undefined) {\n        throw new RequiredError(\"skip\", \"Required parameter skip was null or undefined when calling productCardProductsPaginationGet.\");\n      } // verify required parameter 'filter' is not null or undefined\n\n\n      if (filter === null || filter === undefined) {\n        throw new RequiredError(\"filter\", \"Required parameter filter was null or undefined when calling productCardProductsPaginationGet.\");\n      } // verify required parameter 'category' is not null or undefined\n\n\n      if (category === null || category === undefined) {\n        throw new RequiredError(\"category\", \"Required parameter category was null or undefined when calling productCardProductsPaginationGet.\");\n      } // verify required parameter 'search' is not null or undefined\n\n\n      if (search === null || search === undefined) {\n        throw new RequiredError(\"search\", \"Required parameter search was null or undefined when calling productCardProductsPaginationGet.\");\n      }\n\n      var localVarPath = \"/product-card/productsPagination\";\n      var localVarUrlObj = url.parse(localVarPath, true);\n      var localVarRequestOptions = Object.assign({\n        method: \"GET\"\n      }, options);\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n\n      if (take !== undefined) {\n        localVarQueryParameter[\"take\"] = take;\n      }\n\n      if (skip !== undefined) {\n        localVarQueryParameter[\"skip\"] = skip;\n      }\n\n      if (filter) {\n        localVarQueryParameter[\"filter\"] = filter.join(COLLECTION_FORMATS[\"csv\"]);\n      }\n\n      if (category !== undefined) {\n        localVarQueryParameter[\"category\"] = category;\n      }\n\n      if (search !== undefined) {\n        localVarQueryParameter[\"search\"] = search;\n      }\n\n      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n      return {\n        url: url.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }\n  };\n};\n/**\n * ProductCardApi - functional programming interface\n * @export\n */\n\nexport var ProductCardApiFp = function ProductCardApiFp(configuration) {\n  return {\n    /**\n     *\n     * @param {string} search search\n     * @param {Array&lt;string&gt;} product product\n     * @param {Array&lt;string&gt;} category category\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    productCardCategoryGet: function productCardCategoryGet(search, product, category, options) {\n      var localVarFetchArgs = ProductCardApiFetchParamCreator(configuration).productCardCategoryGet(search, product, category, options);\n      return function () {\n        var fetch = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : portableFetch;\n        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : BASE_PATH;\n        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {\n          if (response.status >= 200 && response.status < 300) {\n            return response;\n          } else {\n            throw response;\n          }\n        });\n      };\n    },\n\n    /**\n     *\n     * @param {string} search search\n     * @param {Array&lt;string&gt;} product get product\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    productCardProductsGet: function productCardProductsGet(search, product, options) {\n      var localVarFetchArgs = ProductCardApiFetchParamCreator(configuration).productCardProductsGet(search, product, options);\n      return function () {\n        var fetch = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : portableFetch;\n        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : BASE_PATH;\n        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {\n          if (response.status >= 200 && response.status < 300) {\n            return response;\n          } else {\n            throw response;\n          }\n        });\n      };\n    },\n\n    /**\n     *\n     * @param {number} take How many per page\n     * @param {number} skip Skip for pagination\n     * @param {Array&lt;string&gt;} filter filter\n     * @param {string} category Filter by  cateogry\n     * @param {string} search search\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    productCardProductsPaginationGet: function productCardProductsPaginationGet(take, skip, filter, category, search, options) {\n      var localVarFetchArgs = ProductCardApiFetchParamCreator(configuration).productCardProductsPaginationGet(take, skip, filter, category, search, options);\n      return function () {\n        var fetch = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : portableFetch;\n        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : BASE_PATH;\n        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {\n          if (response.status >= 200 && response.status < 300) {\n            return response;\n          } else {\n            throw response;\n          }\n        });\n      };\n    }\n  };\n};\n/**\n * ProductCardApi - factory interface\n * @export\n */\n\nexport var ProductCardApiFactory = function ProductCardApiFactory(configuration, fetch, basePath) {\n  return {\n    /**\n     *\n     * @param {string} search search\n     * @param {Array&lt;string&gt;} product product\n     * @param {Array&lt;string&gt;} category category\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    productCardCategoryGet: function productCardCategoryGet(search, product, category, options) {\n      return ProductCardApiFp(configuration).productCardCategoryGet(search, product, category, options)(fetch, basePath);\n    },\n\n    /**\n     *\n     * @param {string} search search\n     * @param {Array&lt;string&gt;} product get product\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    productCardProductsGet: function productCardProductsGet(search, product, options) {\n      return ProductCardApiFp(configuration).productCardProductsGet(search, product, options)(fetch, basePath);\n    },\n\n    /**\n     *\n     * @param {number} take How many per page\n     * @param {number} skip Skip for pagination\n     * @param {Array&lt;string&gt;} filter filter\n     * @param {string} category Filter by  cateogry\n     * @param {string} search search\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    productCardProductsPaginationGet: function productCardProductsPaginationGet(take, skip, filter, category, search, options) {\n      return ProductCardApiFp(configuration).productCardProductsPaginationGet(take, skip, filter, category, search, options)(fetch, basePath);\n    }\n  };\n};\n/**\n * ProductCardApi - object-oriented interface\n * @export\n * @class ProductCardApi\n * @extends {BaseAPI}\n */\n\nexport var ProductCardApi =\n/*#__PURE__*/\nfunction (_BaseAPI8) {\n  _inherits(ProductCardApi, _BaseAPI8);\n\n  function ProductCardApi() {\n    _classCallCheck(this, ProductCardApi);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ProductCardApi).apply(this, arguments));\n  }\n\n  _createClass(ProductCardApi, [{\n    key: \"productCardCategoryGet\",\n\n    /**\n     *\n     * @param {} search search\n     * @param {} product product\n     * @param {} category category\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ProductCardApi\n     */\n    value: function productCardCategoryGet(search, product, category, options) {\n      return ProductCardApiFp(this.configuration).productCardCategoryGet(search, product, category, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @param {} search search\n     * @param {} product get product\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ProductCardApi\n     */\n\n  }, {\n    key: \"productCardProductsGet\",\n    value: function productCardProductsGet(search, product, options) {\n      return ProductCardApiFp(this.configuration).productCardProductsGet(search, product, options)(this.fetch, this.basePath);\n    }\n    /**\n     *\n     * @param {} take How many per page\n     * @param {} skip Skip for pagination\n     * @param {} filter filter\n     * @param {} category Filter by  cateogry\n     * @param {} search search\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ProductCardApi\n     */\n\n  }, {\n    key: \"productCardProductsPaginationGet\",\n    value: function productCardProductsPaginationGet(take, skip, filter, category, search, options) {\n      return ProductCardApiFp(this.configuration).productCardProductsPaginationGet(take, skip, filter, category, search, options)(this.fetch, this.basePath);\n    }\n  }]);\n\n  return ProductCardApi;\n}(BaseAPI);","map":null,"metadata":{},"sourceType":"module"}