{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n// import React from 'react';\nimport path from \"path\";\nimport * as express from \"express\";\nimport cors from \"cors\";\nimport chalk from \"chalk\";\nimport manifestHelpers from \"express-manifest-helpers\";\nimport bodyParser from \"body-parser\";\nimport paths from \"../../config/paths\";\nimport { configureStore, getInitialState } from \"@app/stores\";\nimport createHistory from \"../shared/stores/history\";\nimport errorHandler from \"./middleware/error-handler\";\nimport serverRenderer from \"./middleware/server-renderer\";\nimport moduleFetcher from \"./middleware/fetch-modules\";\n\nrequire(\"dotenv\").config();\n\nvar app = express.default(); // Use Nginx or Apache to serve static assets in production or remove the if() around the following\n// lines to use the express.static middleware to serve assets for production (not recommended!)\n// if (process.env.NODE_ENV === \"development\") {\n\napp.use(paths.publicPath, express.static(path.join(paths.clientBuild, paths.publicPath))); // }\n\napp.use(cors());\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({\n  extended: true\n}));\n\nvar addStore =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee(req, res, next) {\n    var history;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            history = createHistory({\n              initialEntries: [req.url]\n            });\n            res.locals.store = configureStore({\n              history: history,\n              initialState: getInitialState()\n            });\n\n            if (!(typeof next !== \"function\")) {\n              _context.next = 4;\n              break;\n            }\n\n            throw new Error(\"Next handler is missing\");\n\n          case 4:\n            next();\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function addStore(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\napp.use(addStore);\nvar manifestPath = path.join(paths.clientBuild, paths.publicPath);\napp.use(manifestHelpers({\n  manifestPath: \"\".concat(manifestPath, \"/manifest.json\")\n})); // Get Pages from API and add them to the store.\n// If you want to fetch more data, do it in this middleware.\n\napp.use(moduleFetcher()); // Render the HTML and sent it to the server.\n\napp.use(serverRenderer()); // Deal with errors\n\napp.use(errorHandler);\napp.listen(process.env.PORT || 3000, function () {\n  console.log(\"[\".concat(new Date().toISOString(), \"]\"), chalk.blue(\"Application is running: http://localhost:\".concat(process.env.PORT || 3000)));\n});\nexport default app;","map":null,"metadata":{},"sourceType":"module"}