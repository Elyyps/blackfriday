{"ast":null,"code":"function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\n/// <reference path=\"./../../../types/index.d.ts\" />\nimport thunk from \"redux-thunk\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport { routerMiddleware } from \"connected-react-router\";\nimport { combineReducers } from \"redux\";\nimport { connectRouter } from \"connected-react-router\";\nimport { localesReducer } from \"@app/stores/locales\";\nimport { pageReducer } from \"./page\";\nexport var getInitialState = function getInitialState() {\n  var initialState = {};\n  return initialState;\n};\nexport var configureStore = function configureStore(_ref) {\n  var _ref2;\n\n  var history = _ref.history,\n      initialState = _ref.initialState,\n      _ref$middleware = _ref.middleware,\n      middleware = _ref$middleware === void 0 ? [] : _ref$middleware;\n\n  var devtools = process.env.NODE_ENV === \"development\" && typeof window !== \"undefined\" && typeof window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ === \"function\" && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n    actionsBlacklist: []\n  });\n\n  var composeEnhancers = devtools || compose;\n  var store = createStore(combineReducers({\n    locales: localesReducer,\n    page: pageReducer,\n    router: connectRouter(history)\n  }), initialState, composeEnhancers(applyMiddleware.apply(void 0, _toConsumableArray((_ref2 = [thunk, routerMiddleware(history)]).concat.apply(_ref2, _toConsumableArray(middleware)))))); // if (process.env.NODE_ENV !== \"production\") {\n  //   if (module.hot) {\n  //     module.hot.accept(\"./rootReducer\", () => store.replaceReducer(require(\"./rootReducer\").default));\n  //   }\n  // }\n\n  return store;\n};\nexport default configureStore;","map":{"version":3,"sources":["/Users/TomK/Code/BlackFriday_Client/src/shared/stores/store.ts"],"names":["thunk","createStore","applyMiddleware","compose","routerMiddleware","combineReducers","connectRouter","localesReducer","pageReducer","getInitialState","initialState","configureStore","history","middleware","devtools","process","env","NODE_ENV","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","actionsBlacklist","composeEnhancers","store","locales","page","router","concat"],"mappings":";;;;;;;;AAAA;AAEA,OAAOA,KAAP,MAAkB,aAAlB;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,SAASC,gBAAT,QAA8C,wBAA9C;AAEA,SAASC,eAAT,QAAgC,OAAhC;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SAASC,cAAT,QAA+B,qBAA/B;AAGA,SAAqBC,WAArB,QAAwC,QAAxC;AAcA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AACnC,MAAMC,YAAY,GAAc,EAAhC;AACA,SAAOA,YAAP;AACD,CAHM;AAMP,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,OAA6D;AAAA;;AAAA,MAA1DC,OAA0D,QAA1DA,OAA0D;AAAA,MAAjDF,YAAiD,QAAjDA,YAAiD;AAAA,6BAAnCG,UAAmC;AAAA,MAAnCA,UAAmC,gCAAtB,EAAsB;;AACzF,MAAMC,QAAQ,GACZC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAAzB,IACA,OAAOC,MAAP,KAAkB,WADlB,IAEA,OAAOA,MAAM,CAACC,oCAAd,KAAuD,UAFvD,IAGAD,MAAM,CAACC,oCAAP,CAA4C;AAAEC,IAAAA,gBAAgB,EAAE;AAApB,GAA5C,CAJF;;AAMA,MAAMC,gBAAgB,GAAGP,QAAQ,IAAIX,OAArC;AAEA,MAAMmB,KAAK,GAAGrB,WAAW,CACvBI,eAAe,CAAC;AACdkB,IAAAA,OAAO,EAAEhB,cADK;AAEdiB,IAAAA,IAAI,EAAEhB,WAFQ;AAGdiB,IAAAA,MAAM,EAAEnB,aAAa,CAACM,OAAD;AAHP,GAAD,CADQ,EAMvBF,YANuB,EAOvBW,gBAAgB,CAACnB,eAAe,MAAf,4BAAmB,UAACF,KAAD,EAAQI,gBAAgB,CAACQ,OAAD,CAAxB,GAAmCc,MAAnC,iCAA6Cb,UAA7C,EAAnB,EAAD,CAPO,CAAzB,CATyF,CAmBzF;AACA;AACA;AACA;AACA;;AAEA,SAAOS,KAAP;AACD,CA1BM;AA4BP,eAAeX,cAAf","sourcesContent":["/// <reference path=\"./../../../types/index.d.ts\" />\n\nimport thunk from \"redux-thunk\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport { routerMiddleware, RouterState } from \"connected-react-router\";\nimport { History } from \"history\";\nimport { combineReducers } from \"redux\";\nimport { connectRouter } from \"connected-react-router\";\nimport { localesReducer } from \"@app/stores/locales\";\n\nimport { ILocalesState } from \"@app/stores/locales\";\nimport { IPageState, pageReducer } from \"./page\";\n\ntype StoreParams = {\n  history: History;\n  initialState: IAppState;\n  middleware?: any[];\n};\n\nexport interface IAppState {\n  locales: ILocalesState;\n  page: IPageState;\n  router: RouterState;\n}\n\nexport const getInitialState = () => {\n  const initialState = <IAppState>{};\n  return initialState;\n};\n\ndeclare let window: ExtendedWindow;\nexport const configureStore = ({ history, initialState, middleware = [] }: StoreParams) => {\n  const devtools =\n    process.env.NODE_ENV === \"development\" &&\n    typeof window !== \"undefined\" &&\n    typeof window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ === \"function\" &&\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({ actionsBlacklist: [] });\n\n  const composeEnhancers = devtools || compose;\n\n  const store = createStore<IAppState>(\n    combineReducers({\n      locales: localesReducer,\n      page: pageReducer,\n      router: connectRouter(history)\n    }),\n    initialState,\n    composeEnhancers(applyMiddleware(...[thunk, routerMiddleware(history)].concat(...middleware)))\n  );\n\n  // if (process.env.NODE_ENV !== \"production\") {\n  //   if (module.hot) {\n  //     module.hot.accept(\"./rootReducer\", () => store.replaceReducer(require(\"./rootReducer\").default));\n  //   }\n  // }\n\n  return store;\n};\n\nexport default configureStore;\n"]},"metadata":{},"sourceType":"module"}